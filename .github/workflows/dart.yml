name: Dart CI

on: [push]

jobs:
  test:

    runs-on: ubuntu-20.04
    
    steps:
    - uses: actions/checkout@v1
    - uses: actions/setup-java@v1
      with:
        java-version: '21.x'
    - uses: subosito/flutter-action@v1
      with:
        channel: 'stable' # or: 'dev' or 'beta'
    - name: Install dependencies
      run: flutter pub get
    - name: Run tests
      run: flutter test

  web:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v1
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # or: 'dev' or 'beta'

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        buildcommand: [linux]
        os: [ubuntu-20.04]
        exclude:
          - os: ubuntu-20.04
            buildcommand: linux
        include:
#          No macos build for now, have to configure code signing..
#          - buildcommand: macos
#            os: macos-latest
          - buildcommand: ios
            buildargs: --no-codesign
            os: macos-latest
          - buildcommand: windows
            os: windows-latest
          - buildcommand: linux
            os: ubuntu-latest
          - buildcommand: appbundle
            os: ubuntu-latest
          - buildcommand: web
            os: ubuntu-latest


    steps:
      - uses: actions/checkout@v1
      - uses: subosito/flutter-action@v2
        with:
          channel: 'stable' # or: 'dev' or 'beta'
      - uses: actions/setup-java@v1
        if: matrix.buildcommand == 'appbundle'
        with:
          java-version: '12.x'
      - name: Patch for linux build
        if: matrix.buildcommand == 'linux'
        run: |
          flutter doctor
          sudo apt-get update -y
          sudo apt-get install -y ninja-build libgtk-3-dev
          flutter doctor
      - name: Enable build
        if: matrix.buildcommand == 'macos' || matrix.buildcommand == 'linux'
        run: flutter config --enable-${{ matrix.buildcommand }}-desktop
      - name: Build for ${{ matrix.buildcommand }}
        run: cd example && flutter build ${{ matrix.buildcommand }} ${{ matrix.buildargs }}
